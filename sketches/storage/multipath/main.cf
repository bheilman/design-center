body file control
{
  namespace => "cfdc_storage_multipath";
}

bundle agent entry(runenv, metadata, prefix, kernel_module, packages, config, config_path, template_path)
{
  vars:
      "vars" slist => { "@(default:$(runenv).env_vars)" };
      "$(vars)" string => "$(default:$(runenv).$(vars))";

      "api" slist => getindices("$(metadata)[api]");
      "type[$($(metadata)[api][$(api)][type])][$(api)]" string => "$($(metadata)[api][$(api)][type])";
      "booleans" slist => getindices("type[boolean]");
      "strings" slist => getindices("type[string]");
      "lists" slist => getindices("type[list]");
      "join[$(lists)]" string => join(", ",$(lists));

      "install_dir" string => dirname("$(this.promise_filename)");

    template_path::
      "local_template_path" string => "$(template_path)";
    null_template_path::
      "local_template_path" string => "$(install_dir)/templates/multipath.conf";

    test::
      "owner" string => getenv("LOGNAME",100);
      "local_config_path" string => "/tmp$(config_path)";
    not_test::
      "owner" string => "root";
      "local_config_path" string => "$(config_path)";

  classes:
      "$(vars)" expression => "default:runenv_$(runenv)_$(vars)";
      "not_$(vars)" expression => "!default:runenv_$(runenv)_$(vars)";

      "$(booleans)" not => strcmp("$($(booleans))","");
      "not_$(booleans)" expression => strcmp("$($(booleans))","");
      "$(strings)" not => strcmp("$($(strings))","");
      "null_$(strings)" expression => strcmp("$($(strings))","");
      "$(lists)" expression => isgreaterthan(length("$(lists)"),0);
      "empty_$(lists)" not => isgreaterthan(length("$(lists)"),0);

  commands:
    kernel_module.!test::
      "$(default:paths.path[grep])"
      args => "-E '^$(kernel_module) ' /proc/modules",
      classes => default:dc_generic("$(prefix)_module_found"),
      comment => "Determine if the kernel module is loaded";

      "/sbin/modprobe"
      args => "$(kernel_module)",
      ifvarclass => "$(prefix)_module_found_not_ok",
      classes => default:dc_generic("$(prefix)_module_load"),
      comment => "Determine if the kernel module is loaded";

  packages:
    packages.!test::
      "$(packages)"
      package_method => default:generic,
      package_policy => "add",
      classes => default:dc_generic("$(prefix)_install"),
      comment => "Attempt to install given packages";

      "$(packages)"
      package_method => default:generic,
      package_policy => "verify",
      classes => default:dc_generic("$(prefix)_verify"),
      comment => "Verify given packages";

  methods:
      "deploy_multipath_configuration_template"
      usebundle => config($(local_config_path),$(local_template_path),$(config),$(owner));

    verbose::
      "metadata" usebundle => default:report_metadata($(prefix), $(metadata)),
      inherit => "true";

  reports:
    verbose::
      "$(prefix): imported environment '$(runenv)' var '$(vars)' with value '$($(vars))'";
      "$(prefix): imported environment '$(runenv)' class '$(vars)' because 'default:runenv_$(runenv)_$(vars)' was defined"
      ifvarclass => "$(vars)";

      "$(prefix): $(packages) installed" ifvarclass => "$(prefix)_install_repaired";
      "$(prefix): $(packages) verified" ifvarclass => "$(prefix)_verify_ok";
      "$(prefix): $(packages) not verified" ifvarclass => "$(prefix)_verify_not_ok";

    test::
      "$(prefix): parameter $(booleans) defined" ifvarclass => "$(booleans)";
      "$(prefix): parameter $(booleans) not defined" ifvarclass => "not_$(booleans)";
      "$(prefix): parameter $(strings) = $($(strings))" ifvarclass => "$(strings)";
      "$(prefix): parameter $(strings) is null" ifvarclass => "null_$(strings)";
      "$(prefix): parameter $(lists) = { $(join[$(lists)]) }" ifvarclass => "$(lists)";
      "$(prefix): parameter $(lists) is empty" ifvarclass => "empty_$(lists)";
}

# Formal parameters have different names to work-around: https://cfengine.com/dev/issues/2634
bundle agent config(multipath_config_path,multipath_template_path,config_array,config_owner)
{
  vars:
      "sections" slist => { "defaults", "blacklist", "blacklist_exceptions", "multipaths", "devices" };
      "$(sections)_indices" slist => getindices("$(config_array)[$(sections)]");

  classes:
      "sections_ready" expression => isvariable("sections");
    sections_ready::
      "$(sections)_empty" not => isgreaterthan(length("$(sections)_indices"),0);

  files:
      (blacklist_stanzas_ready|blacklist_empty).(blacklist_exceptions_stanzas_ready|blacklist_exceptions_empty).(devices_stanzas_ready|devices_empty).(multipaths_stanzas_ready|multipaths_empty)::
      "$(multipath_config_path)"
      create => "true",
      perms => default:mog("444",$(config_owner),$(config_owner)),
      edit_template => $(multipath_template_path),
      comment => "Deploy multipath configuration";

  methods:
      "build_blacklist_stanza"
      usebundle => build_blacklist("$(config_array)[blacklist]"),
      classes => default:always("blacklist_stanzas_ready"),
      useresult => "blacklist_section";

      "build_blacklist_exceptions_stanza"
      usebundle => build_blacklist("$(config_array)[blacklist_exceptions]"),
      classes => default:always("blacklist_exceptions_stanzas_ready"),
      useresult => "blacklist_exceptions_section";

      "build_device_stanzas"
      usebundle => build_device("$(config_array)[devices]","$(devices_indices)"),
      classes => default:always("devices_stanzas_ready"),
      useresult => "device_stanzas";

      "build_multipath_stanzas"
      usebundle => build_multipath("$(config_array)[multipaths]","$(multipaths_indices)"),
      classes => default:always("multipaths_stanzas_ready"),
      useresult => "multipath_stanzas";
}

# Formal parameters have different names to work-around: https://cfengine.com/dev/issues/2634
bundle agent build_blacklist(blacklist_config_array) {
  vars:
      "blacklist_wwid" slist => getindices("$(blacklist_config_array)[wwid]");
      "blacklist_devnode" slist => getindices("$(blacklist_config_array)[devnode]");
      "blacklist_device" slist => getindices("$(blacklist_config_array)[device]");

      "lines_wwid[$(blacklist_wwid)]" string => "  wwid \"$($(blacklist_config_array)[wwid][$(blacklist_wwid)])\"";
      "lines_devnode[$(blacklist_devnode)]" string => "  devnode \"$($(blacklist_config_array)[devnode][$(blacklist_devnode)])\"";
      "lines_device[$(blacklist_device)]" string => "  device {$(const.n)    vendor \"$($(blacklist_config_array)[device][$(blacklist_device)][vendor])\"$(const.n)    product \"$($(blacklist_config_array)[device][$(blacklist_device)][product])\"$(const.n)  }";

      "lines_wwid" slist => getvalues("lines_wwid");
      "lines_devnode" slist => getvalues("lines_devnode");
      "lines_device" slist => getvalues("lines_device");
      "lines" slist => { @(lines_wwid), @(lines_devnode), @(lines_device) };
      "section" string => join("$(const.n)","lines");

  reports:
      "$(section)"
      bundle_return_value_index => "0";
}

# Formal parameters have different names to work-around: https://cfengine.com/dev/issues/2634
bundle agent build_multipath(multipath_config_array,multipath_wwid) {
  vars:
      "keywords" slist => getindices("$(multipath_config_array)[$(multipath_wwid)]");
      "lines[$(keywords)]" string => "$(keywords) \"$($(multipath_config_array)[$(multipath_wwid)][$(keywords)])\"";
      "lines" slist => getvalues("lines");
      "stanza" string => join("$(const.n)    ","lines");

  reports:
      "  device {
    wwid \"$(multipath_wwid)\"
    $(stanza)
  }"
      bundle_return_value_index => "$(multipath_wwid)";
}

# Formal parameters have different names to work-around: https://cfengine.com/dev/issues/2634
bundle agent build_device(device_config_array,device_index) {
  vars:
      "keywords" slist => getindices("$(device_config_array)[$(device_index)]");
      "lines[$(keywords)]" string => "$(keywords) \"$($(device_config_array)[$(device_index)][$(keywords)])\"";
      "lines" slist => getvalues("lines");
      "stanza" string => join("$(const.n)    ","lines");

  reports:
      "  device {
    $(stanza)
  }"
      bundle_return_value_index => "$(device_index)";
}
